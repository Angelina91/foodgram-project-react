python manage.py loaddata data.json # сделать внутри контрейнера

без входа в контейнер - docker exec -it <имя контейнера> python manage.py loaddata <назание файла>/<путь до файла>

    # from django.contrib.auth.models import User
    # from rest_framework import authentication
    # from rest_framework import exceptions

    # class ExampleAuthentication(authentication.BaseAuthentication):
    #     def authenticate(self, request):
    #         username = request.META.get('HTTP_X_USERNAME')
    #         if not username:
    #             return None

    #         try:
    #             user = User.objects.get(username=username)
    #         except User.DoesNotExist:
    #             raise exceptions.AuthenticationFailed('No such user')

    #         return (user, None)

#     Вы можете использовать валидатор для extra_kwargs:

# 'email': {
#             'validators': [
#                 UniqueValidator(
#                     queryset=User.objects.all()
#                 )
#             ]
#         }

# class CommentSerializer(serializers.Serializer):
#     email = serializers.EmailField(source="user.email")

; def bulk_update_standup(self, request, *args, **kwargs):
;     standup_list = request.data.get("standupList", [])
;     qs = []
;     for item in standup_list:
;         serializer = StandupSerializer(data=item)
;         standup_instance = Standup(**serializer.validated_data)
;         qs.append(standup_instance)

;     Standup.objects.bulk_create(qs)
;     data = {"data": None, "message": "Saved Successfully"}
;     return Response(data=data, status=status.HTTP_200_OK)

; def create(self, request, *args, **kwargs):
;       if isinstance(request.data, list):
;         serializer = self.get_serializer(data=request.data, many=True)
;       else:
;         serializer = self.get_serializer(data=request.data)
;       serializer.is_valid(raise_exception=True)
;       self.perform_create(serializer)
;       headers = self.get_success_headers(serializer.data)
;       return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

; models.users
    # USERNAME_FIELD = 'username'
    # EMAIL_FIELD = 'email'
    # REQUIRED_FIELDS = ['email']

    # USER_ROLE = 'user'
    # MODERATOR_ROLE = 'moderator'
    # ADMIN_ROLE = 'admin'

    # ROLE_CHOICES = (
    #     (USER_ROLE, 'user'),
    #     (MODERATOR_ROLE, 'moderator'),
    #     (ADMIN_ROLE, 'admin'),
    # )


    # @property
    # def is_admin(self):
    #     return self.role == User.ADMIN_ROLE or self.is_superuser

    # @property
    # def is_moderator(self):
    #     return self.role == User.MODERATOR_ROLE or self.is_staff


    # role = models.CharField(
    #     choices=ROLE_CHOICES,
    #     max_length=50,
    #     default='user',
    #     verbose_name='Роль пользователя',
    #     help_text='Выберите из списка роль для пользователя'
    # )

    # bio = models.TextField(
    #     max_length=250,
    #     blank=True,
    #     verbose_name='Роль пользователя',
    #     help_text='Выберите из списка роль для пользователя'
    # )

; serializers
# from datetime import date
# from django.db.models import Avg
# from users.validators import validate_username_not_me
