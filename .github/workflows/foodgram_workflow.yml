name: Foodgram_workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt 

      - name: Test with flake8
        run: |
          python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: ./backend/
          push: true
          tags: angelina91/foodgram_backend:latest
          file: backend/Dockerfile

      - name: Push frontend image to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: true
          tags: angelina91/foodgram_frontend:latest
          file: frontend/Dockerfile

  # build_compose_on_host:
  #     name: Copy docker compose
  #     needs: build_and_push_to_docker_hub
  #     runs-on: ubuntu-latest
  #     steps:
  #     - uses: actions/checkout@v3
  #     - name: find current directory
  #       run: |
  #         pwd
  #         ls -lah

  #     - name: Copy infra to server
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         local: infra/
  #         remote: /${{ secrets.USERNAME }}/foodgram_progect/
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}

  # build_compose_on_host:
  #   name: Copy docker compose
  #   needs: build_and_push_to_docker_hub
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
        
  #   - name: find current directory
  #     run: |
  #       pwd
  #       ls -lah

  #   - name: copy file via ssh password
  #     uses: appleboy/scp-action@v0.1.4
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       source: "backend/docker compose.yaml"
  #       target: /home/angelina91/foodgram_progect/
  #       tar_dereference: true
  #       rm: true

  deploy:
    runs-on: ubuntu-latest
    # needs: build_docker_compose_on_host
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      # - name: Login to Docker
      #   uses: docker/login-action@v1 
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }} 
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}

          script: |
            sudo docker compose stop
            sudo docker compose rm -f backend frontend
            sudo docker image rm angelina91/foodgram_backend angelina91/foodgram_frontend
            sudo docker compose pull backend frontend
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose up -d

  send_message:
    name: happyend
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send telegram_message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
